#!/bin/bash
# chenwu@espressif.com
set -e

TK_PATH=`realpath $0`
TK_PATH=`echo ${TK_PATH%/bin*}`
source $TK_PATH/bin/esptk-export

# variables
s_download_flag=0
flash_baud_rate=921600
is_nonos_at=0
flash_write_params=""
s_url_prefix="https://download.espressif.com/esp_at/firmware/"
declare -A module_list

# help
if [ "$1" = "-h" ]; then
    ESP_LOGB "NAME\r\n  at-released: Download the released firmware of esp-at project from AT Binary Lists\r\n"
    ESP_LOGN "  at-released: just download the firmware"
    ESP_LOGN "  at-released [x]: download the firmware and write flash by /dev/ttyUSBx"
    exit
fi

# download check
if [ $# -eq 0 ]; then
    s_download_flag=0
elif [ $# -eq 1 ]; then
    if [ -e "/dev/ttyUSB$1" ]; then
        s_download_flag=1
    else
        ESP_LOGW "No /dev/ttyUSB$1"
        exit
    fi
elif [ $# -gt 1 ]; then
    ESP_LOGE "unsupported parameter counts: $#"
fi

# esp8266-at
module_list["a1"]="ESP-WROOM-02 (v2.2.1.0)      |    ESP8266/ESP8266-IDF-AT_V2.2.1.0.zip"
module_list["a2"]="ESP-WROOM-02 (v2.2.0.0)      |    ESP8266/ESP8266-IDF-AT_V2.2.0.0.zip"
module_list["a3"]="ESP-WROOM-02 (v2.1.0.0)      |    ESP8266/ESP8266-IDF-AT_V2.1.0.0.zip"
module_list["a4"]="ESP-WROOM-02 (v2.0.0.0)      |    ESP8266/ESP8266-IDF-AT_V2.0_0.zip"

# esp32c3-at
module_list["c1"]="ESP32-C3-MINI-1 (v2.4.1.0)   |    ESP32C3/ESP32-C3-MINI-1_AT_Bin_V2.4.1.0.zip"
module_list["c2"]="ESP32-C3-MINI-1 (v2.4.0.0)   |    ESP32C3/ESP32-C3-MINI-1_AT_Bin_V2.4.0.0.zip"
module_list["c3"]="ESP32-C3-MINI-1 (v2.3.0.0)   |    ESP32C3/ESP32-C3-MINI-1_AT_Bin_V2.3.0.0.zip"
module_list["c4"]="ESP32-C3-MINI-1 (v2.2.0.0)   |    ESP32C3/ESP32-C3-MINI-1_AT_Bin_V2.2.0.0.zip"

# esp32-at
### ESP32-WROOM-32
module_list["b1"]="ESP32-WROOM-32 (v2.4.0.0)    |    ESP32/ESP32_WROOM/ESP32-WROOM-32_AT_Bin_V2.4.0.0.zip"
module_list["b2"]="ESP32-WROOM-32 (v2.2.0.0)    |    ESP32/ESP32_WROOM/ESP32-WROOM-32_AT_Bin_V2.2.0.0.zip"
module_list["b3"]="ESP32-WROOM-32 (v2.1.0.0)    |    ESP32/ESP32_WROOM/ESP32-WROOM-32_AT_Bin_V2.1.0.0.zip"
module_list["b4"]="ESP32-WROOM-32 (v2.0.0.0)    |    ESP32/ESP32_WROOM/ESP32-WROOM-32_AT_Bin_V2.0.zip"
### ESP32-WROVER-32
module_list["bw1"]="ESP32-WROVER-32 (v2.4.0.0)  |    ESP32/ESP32_WROVER/ESP32-WROVER_AT_Bin_V2.4.0.0.zip"
module_list["bw2"]="ESP32-WROVER-32 (v2.2.0.0)  |    ESP32/ESP32_WROVER/ESP32-WROVER_AT_Bin_V2.2.0.0.zip"
module_list["bw3"]="ESP32-WROVER-32 (v2.1.0.0)  |    ESP32/ESP32_WROVER/ESP32-WROVER_AT_Bin_V2.1.0.0.zip"
module_list["bw4"]="ESP32-WROVER-32 (v2.0.0.0)  |    ESP32/ESP32_WROVER/ESP32-WROVER_AT_Bin_V2.0.zip"
### ESP32-PICO-D4
module_list["bp1"]="ESP32-PICO (v2.4.0.0)       |    ESP32/ESP32_PICO_D4/ESP32-PICO-D4_AT_Bin_V2.4.0.0.zip"
module_list["bp2"]="ESP32-PICO (v2.2.0.0)       |    ESP32/ESP32_PICO_D4/ESP32-PICO-D4_AT_Bin_V2.2.0.0.zip"
module_list["bp3"]="ESP32-PICO (v2.1.0.0)       |    ESP32/ESP32_PICO_D4/ESP32-PICO-D4_AT_Bin_V2.1.0.0.zip"
module_list["bp4"]="ESP32-PICO (v2.0.0.0)       |    ESP32/ESP32_PICO_D4/ESP32-PICO-D4_AT_Bin_V2.0.zip"
### ESP32-SOLO-1
module_list["bs1"]="ESP32-SOLO (v2.4.0.0)       |    ESP32/ESP32_SOLO/ESP32-SOLO_AT_Bin_V2.4.0.0.zip"
module_list["bs2"]="ESP32-SOLO (v2.2.0.0)       |    ESP32/ESP32_SOLO/ESP32-SOLO_AT_Bin_V2.2.0.0.zip"
module_list["bs3"]="ESP32-SOLO (v2.1.0.0)       |    ESP32/ESP32_SOLO/ESP32-SOLO_AT_Bin_V2.1.0.0.zip"
module_list["bs4"]="ESP32-SOLO (v2.0.0.0)       |    ESP32/ESP32_SOLO/ESP32-SOLO_AT_Bin_V2.0.zip"
### ESP32-MINI-1
module_list["bm1"]="ESP32-MINI (v2.4.0.0)       |    ESP32/ESP32_MINI/ESP32-MINI-1_AT_Bin_V2.4.0.0.zip"
module_list["bm2"]="ESP32-MINI (v2.2.0.0)       |    ESP32/ESP32_MINI/ESP32-MINI-1_AT_Bin_V2.2.0.0.zip"

# nonos-at
module_list["n0"]="ESP-WROOM-02 (v1.7.5.0)      |    nonos/esp8266_at_bin_v1.7.5.zip"
module_list["n1"]="ESP-WROOM-02 (v1.7.4.0)      |    nonos/esp8266_at_bin_v1.7.4.zip"
module_list["n2"]="ESP-WROOM-02 (v1.7.3.0)      |    nonos/esp8266_at_bin_v1.7.3.zip"
module_list["n3"]="ESP-WROOM-02 (v1.7.2.0)      |    nonos/esp8266_at_bin_v1.7.2.zip"
module_list["n4"]="ESP-WROOM-02 (v1.7.1.0)      |    nonos/esp8266_at_bin_v1.7.1.zip"
module_list["n5"]="ESP-WROOM-02 (v1.7.0.0)      |    nonos/esp8266_at_bin_v1.7.0.zip"
module_list["n6"]="ESP-WROOM-02 (v1.6.2.0)      |    nonos/esp8266_at_bin_v1.6.2.zip"
module_list["n7"]="ESP-WROOM-02 (v1.6.1.0)      |    nonos/esp8266_at_bin_v1.6.1.zip"
module_list["n8"]="ESP-WROOM-02 (v1.6.0.0)      |    nonos/esp8266_at_bin_v1.6.0.zip"
module_list["n9"]="ESP-WROOM-02 (v1.5.1.0)      |    nonos/esp8266_at_bin_v1.5.1.zip"

# esp32s2-at
module_list["s1"]="ESP32-S2-WROOM (v2.1.0.0)    |    ESP32S2/ESP32-S2-WROOM/ESP32-S2-WROOM_AT_Bin_V2.1.0.0.zip"
module_list["sw1"]="ESP32-S2-WROVER (v2.1.0.0)  |    ESP32S2/ESP32-S2-WROVER/ESP32-S2-WROVER_AT_Bin_V2.1.0.0.zip"
module_list["ss1"]="ESP32-S2-SOLO (v2.1.0.0)    |    ESP32S2/ESP32-S2-SOLO/ESP32-S2-SOLO_AT_Bin_V2.1.0.0.zip"
module_list["sm1"]="ESP32-S2-MINI (v2.1.0.0)    |    ESP32S2/ESP32-S2-MINI/ESP32-S2-MINI_AT_Bin_V2.1.0.0.zip"

# prompt
sorted_index=`echo ${!module_list[@]} | xargs -n1 | sort -g | xargs`
for key in $sorted_index; do
    value=${module_list[${key}]}
    ESP_LOGI "${key}: ${value%|*}"
done

echo -n "Select the released firmware you would like to download by index (default 1): "
read input
if [ -z $input ]; then
    input=1
fi

if [[ $input == *"n"* ]]; then
    is_nonos_at=1
    flash_write_params="--flash_size 2MB-c1"
fi

# calculate url by input
dst_module_info=${module_list[${input}]}
dst_module_name=${dst_module_info%|*}

stripped_value=`echo $dst_module_info | sed s/[[:space:]]//g`
s_url_suffix="${stripped_value#*|}"
s_firmware_url="${s_url_prefix}${s_url_suffix}"

ESP_LOGW "Selected Module (${input}): $dst_module_name"
ESP_LOGI "Ready to Download Released Firmware from AT Binary Lists.."

# download
dst_zip=${s_firmware_url##*/}
rm -rf $dst_zip
echo "zip is $dst_zip"
wget $s_firmware_url --no-check-certificate -O $dst_zip || ESP_LOGE "WGet Released Firmware Failed"

dst_dir=${dst_zip%.*}
echo "dst dir is $dst_dir"

rm -rf $dst_dir
unzip $dst_zip -d ${dst_dir}

if [[ $input == *"n"* ]]; then
    boot_bin=`find ${dst_dir} -name "boot_v1.7.bin" | xargs realpath`
    user_bin=`find ${dst_dir} -name "user1.2048.new.5.bin" | grep -v at_sdio | xargs realpath`
    phy_init_bin=`find ${dst_dir} -name "esp_init_data_default*.bin" | head -n 1 | xargs realpath`
    rm -rf target.bin
    ESP_LOGI "Combine bins.. (boot:0x0 $boot_bin, userbin: 0x1000 $user_bin, phy_init: 0x1fc000 $phy_init_bin)"
    esp-combine-bin.py 0x0 $boot_bin 0x1000 $user_bin 0x1fc000 $phy_init_bin 2MB || ESP_LOGE "Failed to combine bins"
    abs_dst_path=`find -name "target.bin" | xargs realpath`
else
    abs_dst_path=`find ${dst_dir} -name "*factory*.bin" | grep -v MACOS | grep -v param | xargs realpath`
fi

ESP_LOGIB "Released firmware successfully downloaded! ----> $abs_dst_path"

# flash to chip
if [ $s_download_flag -eq 1 ]; then
    ESP_LOGI "Ready to flash firmware to chip by /dev/ttyUSB$1.."
    ESP_LOGI "esptool.py --port /dev/ttyUSB$1 --baud $flash_baud_rate write_flash 0x0 $abs_dst_path.."
    esptool.py --port /dev/ttyUSB$1 --baud $flash_baud_rate write_flash $flash_write_params 0x0 $abs_dst_path || ESP_LOGE "Flash Firmware Failed"
    ESP_LOGIB "Released firmware successfully flashed to chip!"
else
    ESP_LOGN "All done! Please run:\r\n"
    ESP_LOGN "  esptool.py --port [PORT] --baud $flash_baud_rate write_flash $flash_write_params 0x0 $abs_dst_path\r\n"
fi
